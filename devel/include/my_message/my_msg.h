// Generated by gencpp from file my_message/my_msg.msg
// DO NOT EDIT!


#ifndef MY_MESSAGE_MESSAGE_MY_MSG_H
#define MY_MESSAGE_MESSAGE_MY_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_message
{
template <class ContainerAllocator>
struct my_msg_
{
  typedef my_msg_<ContainerAllocator> Type;

  my_msg_()
    : c(0)
    , a()  {
    }
  my_msg_(const ContainerAllocator& _alloc)
    : c(0)
    , a(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _c_type;
  _c_type c;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _a_type;
  _a_type a;





  typedef boost::shared_ptr< ::my_message::my_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_message::my_msg_<ContainerAllocator> const> ConstPtr;

}; // struct my_msg_

typedef ::my_message::my_msg_<std::allocator<void> > my_msg;

typedef boost::shared_ptr< ::my_message::my_msg > my_msgPtr;
typedef boost::shared_ptr< ::my_message::my_msg const> my_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_message::my_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_message::my_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_message::my_msg_<ContainerAllocator1> & lhs, const ::my_message::my_msg_<ContainerAllocator2> & rhs)
{
  return lhs.c == rhs.c &&
    lhs.a == rhs.a;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_message::my_msg_<ContainerAllocator1> & lhs, const ::my_message::my_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_message

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_message::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_message::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_message::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_message::my_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_message::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_message::my_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_message::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01bd265c1d029ea218ce44ea3c9c2cad";
  }

  static const char* value(const ::my_message::my_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01bd265c1d029ea2ULL;
  static const uint64_t static_value2 = 0x18ce44ea3c9c2cadULL;
};

template<class ContainerAllocator>
struct DataType< ::my_message::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_message/my_msg";
  }

  static const char* value(const ::my_message::my_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_message::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "char c\n"
"int64[] a\n"
;
  }

  static const char* value(const ::my_message::my_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_message::my_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.c);
      stream.next(m.a);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_message::my_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_message::my_msg_<ContainerAllocator>& v)
  {
    s << indent << "c: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c);
    s << indent << "a[]" << std::endl;
    for (size_t i = 0; i < v.a.size(); ++i)
    {
      s << indent << "  a[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.a[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MESSAGE_MESSAGE_MY_MSG_H
